import React, { useEffect, useMemo } from 'react';
import { Button, Form, Input, Modal } from 'antd';
import { FormInstance } from 'antd/es/form';
import { {{ class_name }}Create } from '@/types/{{kebab_case_class_name}}';

const {{ lowercase_class_name }}CreateFormItemLayout = {
  labelCol: { span: 5 },
  wrapperCol: { span: 15 },
};

interface {{ class_name }}CreateProps {
  is{{ class_name }}CreateModalVisible: boolean;
  on{{ class_name }}CreateCancel: () => void;
  on{{ class_name }}CreateFinish: ({{ class_name }}Create: {{ class_name }}Create) => void;
  is{{ class_name }}CreateLoading: boolean;
  {{ lowercase_class_name }}CreateForm: FormInstance;
}

const {{ class_name }}CreateComponent: React.FC<{{ class_name }}CreateProps> = ({
                                                                is{{ class_name }}CreateModalVisible,
                                                                on{{ class_name }}CreateCancel,
                                                                on{{ class_name }}CreateFinish,
                                                                is{{ class_name }}CreateLoading,
                                                                {{ lowercase_class_name }}CreateForm,
                                                              }) => {
  const resetPageData = () => {
    {{ lowercase_class_name }}CreateForm.resetFields();
  };

  const footerButtons = useMemo(
    () => [
      <Button key="back" onClick={on{{ class_name }}CreateCancel}>
        取消
      </Button>,
      <Button key="submit" type="primary" loading={is{{ class_name }}CreateLoading} onClick={() => {{ lowercase_class_name }}CreateForm.submit()}>
        确定
      </Button>,
    ],
    [is{{ class_name }}CreateLoading, {{ lowercase_class_name }}CreateForm, on{{ class_name }}CreateCancel],
  );

  useEffect(() => {
    resetPageData();
  }, [is{{ class_name }}CreateModalVisible]);

  return (
    <div>
      <Modal title="{{ function_name }}新增" open={is{{ class_name }}CreateModalVisible} onCancel={on{{ class_name }}CreateCancel} footer={footerButtons}>
        <Form {...{{ lowercase_class_name }}CreateFormItemLayout} form={ {{ lowercase_class_name }}CreateForm} name="{{ lowercase_class_name }}Create" onFinish={on{{ class_name }}CreateFinish}>
          {%- for field in fields %}
          {%- if field.gen_field.queryable == 1 %}
          <Form.Item name="{{ field.gen_field.field_name }}" label="{{ field.field.comment }}" rules={[{ required: true, message: '请输入' }]}>
            {%- if field.gen_field.js_type == 'string' %}
            <Input placeholder="请输入" />
            {%- elif field.gen_field.js_type == 'Date' %}
            <DatePicker.RangePicker />
            {%- elif field.gen_field.js_type == 'number' %}
            <Input type="number" placeholder="请输入" />
            {%- elif field.gen_field.field_name == 'status' %}
            <Select
              allowClear
              placeholder="请选择"
              optionFilterProp="label"
              defaultValue={initStatus}
              onChange={handleChangeState}
              options={[
                {
                  value: '1',
                  label: '正常',
                },
                {
                  value: '0',
                  label: '停用',
                },
              ]}
            />
            {% else %}
            <Input placeholder="请输入" />
            {% endif %}
          </Form.Item>
          {%- endif %}
          {%- endfor %}
        </Form>
      </Modal>
    </div>
  );
};

export default {{ class_name }}CreateComponent;