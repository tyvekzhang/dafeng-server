import { {{ class_name }}BatchModify } from '@/types/{{ kebab_case_class_name }}';
import { Button, DatePicker, Form, Input, Modal, Select } from 'antd';
import { FormInstance } from 'antd/es/form';
import React, { useMemo } from 'react';

interface {{ class_name }}BatchModifyProps {
  is{{ class_name }}BatchModifyModalVisible: boolean;
  on{{ class_name }}BatchModifyCancel: () => void;
  on{{ class_name }}BatchModifyFinish: () => void;
  is{{ class_name }}BatchModifyLoading: boolean;
  {{ lowercase_class_name }}BatchModifyForm: FormInstance<{{ class_name }}BatchModify>;
}

const {{ lowercase_class_name }}BatchModifyFormItemLayout = {
  labelCol: { span: 6 },
  wrapperCol: { span: 18 },
};

const {{ class_name }}BatchModifyComponent: React.FC<{{ class_name }}BatchModifyProps> = ({
  is{{ class_name }}BatchModifyModalVisible,
  on{{ class_name }}BatchModifyCancel,
  on{{ class_name }}BatchModifyFinish,
  is{{ class_name }}BatchModifyLoading,
  {{ lowercase_class_name }}BatchModifyForm,
}) => {
  const footerButtons = useMemo(
    () => [
      <Button key="cancel" onClick={on{{ class_name }}BatchModifyCancel}>
        取消
      </Button>,
      <Button key="submit" type="primary" loading={is{{ class_name }}BatchModifyLoading} onClick={on{{ class_name }}BatchModifyFinish}>
        确定
      </Button>,
    ],
    [is{{ class_name }}BatchModifyLoading, on{{ class_name }}BatchModifyCancel],
  );

  return (
    <Modal
      title="{{ function_name }}编辑"
      open={is{{ class_name }}BatchModifyModalVisible}
      onCancel={on{{ class_name }}BatchModifyCancel}
      footer={footerButtons}
      destroyOnClose
    >
        <Form
          {... {{ lowercase_class_name }}BatchModifyFormItemLayout}
          form={ {{ lowercase_class_name }}BatchModifyForm}
          name="{{ lowercase_class_name }}BatchModify"
          onFinish={on{{ class_name }}BatchModifyFinish}
          className="grid grid-cols-1 lg:grid-cols-2 gap-y-0 gap-x-2 pt-4"
        >
          {%- for field in fields %}
          {%- if field.gen_field.batch_modifiable == 1 and field.gen_field.field_name != primary_key %}
          <Form.Item name="{{ field.gen_field.field_name }}" label="{{ field.field.comment }}" rules={[{ required: false, message: '请输入' }]}>
            {%- if field.gen_field.html_type == 'input' and field.gen_field.js_type == 'string' %}
            <Input placeholder="请输入" />
            {%- elif field.gen_field.html_type == 'datetime' %}
            <DatePicker.RangePicker />
            {%- elif field.gen_field.html_type == 'input' and field.gen_field.js_type == 'number' %}
            <Input type="number" placeholder="请输入" />
            {%- elif field.gen_field.field_name == 'status' %}
            <Select
              allowClear
              placeholder="请选择"
              optionFilterProp="label"
              defaultValue={"1"}
              onChange={() => {} }
              options={[
                {
                  value: '1',
                  label: '正常',
                },
                {
                  value: '0',
                  label: '停用',
                },
              ]}
            />
            {% else %}
            <Input placeholder="请输入" />
            {% endif %}
          </Form.Item>
          {%- endif %}
          {%- endfor %}
        </Form>
    </Modal>
  );
};

export default {{ class_name }}BatchModifyComponent;
