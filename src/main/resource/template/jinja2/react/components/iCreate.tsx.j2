import { {{ class_name }}Create } from '@/types/{{ kebab_case_class_name }}';
import { Button, DatePicker, Form, Input, Modal, Select } from 'antd';
import { FormInstance } from 'antd/es/form';
import React, { useMemo } from 'react';

const {{ lowercase_class_name }}CreateFormItemLayout = {
  labelCol: { span: 5 },
  wrapperCol: { span: 17 },
};

interface {{ class_name }}CreateProps {
  is{{ class_name }}CreateModalVisible: boolean;
  on{{ class_name }}CreateCancel: () => void;
  on{{ class_name }}CreateFinish: ({{ lowercase_class_name }}Create: {{ class_name }}Create) => void;
  is{{ class_name }}CreateLoading: boolean;
  {{ lowercase_class_name }}CreateForm: FormInstance;
}

const {{ class_name }}CreateComponent: React.FC<{{ class_name }}CreateProps> = ({
  is{{ class_name }}CreateModalVisible,
  on{{ class_name }}CreateCancel,
  on{{ class_name }}CreateFinish,
  is{{ class_name }}CreateLoading,
  {{ lowercase_class_name }}CreateForm,
}) => {
  const footerButtons = useMemo(
    () => [
      <Button key="back" onClick={on{{ class_name }}CreateCancel}>
        取消
      </Button>,
      <Button key="submit" type="primary" loading={is{{ class_name }}CreateLoading} onClick={() => {{ lowercase_class_name }}CreateForm.submit()}>
        确定
      </Button>,
    ],
    [is{{ class_name }}CreateLoading, {{ lowercase_class_name }}CreateForm, on{{ class_name }}CreateCancel],
  );

  return (
    <div>
      <Modal
        title="{{ function_name }}新增"
        open={is{{ class_name }}CreateModalVisible}
        onCancel={on{{ class_name }}CreateCancel}
        footer={footerButtons}
        width={'60%'}
      >
        <Form
          {...{{ lowercase_class_name }}CreateFormItemLayout}
          form={ {{ lowercase_class_name }}CreateForm}
          name="{{ lowercase_class_name }}Create"
          onFinish={on{{ class_name }}CreateFinish}
          className="grid grid-cols-1 lg:grid-cols-2 gap-y-0 gap-x-2 pt-4"
        >
          {%- for field in fields %}
          {%- set comment = "" %}
          {%- if field.gen_field.creatable == 1 and field.gen_field.field_name != primary_key %}
          {%- if field.field.comment and field.field.comment != "" %}
              {%- set parentheseIndex_en = field.field.comment.find("(") %}
              {%- set parentheseIndex_cn = field.field.comment.find("（") %}
              {%- if parentheseIndex_en!= -1 %}
                  {%- set comment = field.field.comment[:parentheseIndex_en] %}
              {%- elif parentheseIndex_cn!= -1 %}
                  {%- set comment = field.field.comment[:parentheseIndex_cn] %}
              {%- else %}
                  {%- set comment = field.field.comment %}
              {%- endif %}
          {%- endif %}
          <Form.Item name="{{ field.gen_field.field_name }}" label="{{ comment }}" rules={[{ required: false, message: '请输入' }]}>
            {%- if field.gen_field.html_type == 'input' and field.gen_field.js_type == 'string' %}
            <Input placeholder="请输入" />
            {%- elif field.gen_field.html_type == 'datetime' %}
            <DatePicker />
            {%- elif field.gen_field.html_type == 'input' and field.gen_field.js_type == 'number' %}
            <Input type="number" placeholder="请输入" />
            {%- elif field.gen_field.field_name == 'status' %}
            <Select
              allowClear
              placeholder="请选择"
              optionFilterProp="label"
              defaultValue={"1"}
              onChange={() => {} }
              options={[
                {
                  value: '1',
                  label: '正常',
                },
                {
                  value: '0',
                  label: '停用',
                },
              ]}
            />
            {%- else %}
            <Input placeholder="请输入" />
            {%- endif %}
          </Form.Item>
          {%- endif %}
          {%- endfor %}
        </Form>
      </Modal>
    </div>
  );
};

export default {{ class_name }}CreateComponent;
