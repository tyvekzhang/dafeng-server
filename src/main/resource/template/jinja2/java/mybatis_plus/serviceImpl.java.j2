package {{ package_name }}.service.impl;

import javax.annotation.Resource;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.StringUtils;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import {{ package_name }}.command.{{ class_name }}Query;
import {{ package_name }}.entity.{{ class_name }}DO;
import {{ package_name }}.mapper.{{ class_name }}Mapper;
import {{ package_name }}.service.I{{ class_name }}Service;

/**
 * <p>
 * {{ function_name }} 服务接口实现
 * </p>
 *
 * @author {{ author }}
 * @since {{ datetime }}
 */
@Slf4j
@Service
public class {{ class_name }}ServiceImpl extends ServiceImpl<{{ class_name }}Mapper, {{ class_name }}DO> implements I{{ class_name }}Service {
    @Resource
    private {{ class_name }}Mapper {{ lowercase_class_name }}Mapper;

    @Override
    public Page<{{ class_name }}DO> fetch{{ class_name }}ByPage(int current, int pageSize, {{ class_name }}Query {{ lowercase_class_name }}query) {
        // 构建分页对象
        Page<{{ class_name }}DO> pageRequest = new Page<>(current, pageSize);
        // 使用 LambdaQueryWrapper 构建查询条件
        LambdaQueryWrapper<{{ class_name }}DO> queryWrapper = {{ class_name }}DO.queryWrapper();
        // 动态添加查询条件
        {%- for field in fields -%}
        {%- if field.gen_field.queryable == 1 -%}
        {% set field_name=field.gen_field.field_name[0].upper() + field.gen_field.field_name[1:] %}
        {%- if field.gen_field.field_type == 'String' %}
        if (!StringUtils.isEmpty({{ lowercase_class_name }}query.get{{ field_name }}())) {
           queryWrapper.like({{ class_name }}DO::get{{ field_name }}, {{ lowercase_class_name }}query.get{{ field_name }}());
        }
        {%- else %}
        if ({{ lowercase_class_name }}query.get{{ field_name }}() != null) {
          queryWrapper.eq({{ class_name }}DO::get{{ field_name }}, {{ lowercase_class_name }}query.get{{ field_name }}());
        }
        {%- endif %}
        {%- endif -%}
        {% endfor %}
        // 执行分页查询并返回
        return {{ lowercase_class_name }}Mapper.selectPage(pageRequest, queryWrapper);
    }

}

