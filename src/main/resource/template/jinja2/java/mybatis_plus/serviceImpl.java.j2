package {{ package_name }}.service.impl;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import org.springframework.web.multipart.MultipartFile;
import com.alibaba.excel.EasyExcel;
import com.alibaba.excel.context.AnalysisContext;
import com.alibaba.excel.event.AnalysisEventListener;
import lombok.extern.slf4j.Slf4j;
import cn.hutool.core.map.MapUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.StringUtils;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.singularity.common.service.ValidateService;
import com.singularity.common.utils.ExcelExportUtil;
import com.singularity.common.wrapper.ResponseWrapper;
import {{ package_name }}.command.{{ class_name }}Create;
import {{ package_name }}.command.{{ class_name }}Query;
import {{ package_name }}.converter.{{ class_name }}Converter;
import {{ package_name }}.entity.{{ class_name }}DO;
import {{ package_name }}.mapper.{{ class_name }}Mapper;
import {{ package_name }}.service.I{{ class_name }}Service;
import {{ package_name }}.vo.{{ class_name }}Detail;
import {{ package_name }}.vo.{{ class_name }}Page;
import static com.singularity.common.utils.SecurityUtil.getCurrentUser;

/**
 * <p>
 * {{ function_name }}服务接口实现
 * </p>
 *
 * @author {{ author }}
 * @since {{ datetime }}
 */
@Slf4j
@Service
public class {{ class_name }}ServiceImpl extends ServiceImpl<{{ class_name }}Mapper, {{ class_name }}DO> implements I{{ class_name }}Service {
    @Resource
    private {{ class_name }}Mapper {{ lowercase_class_name }}Mapper;

    @Resource
    private ValidateService validateService;

    /**
     * 分页查询{{ function_name }}
     *
     * @param {{ lowercase_class_name }}Query 查询条件
     * @return 分页查询结果
     */
    @Override
    public Map<String, Object> fetch{{ class_name }}ByPage({{ class_name }}Query {{ lowercase_class_name }}Query) {
        // 构建分页对象
        Page<{{ class_name }}DO> pageRequest = {{ lowercase_class_name }}Query.buildPage();
        // 使用 LambdaQueryWrapper 构建查询条件
        LambdaQueryWrapper<{{ class_name }}DO> queryWrapper = {{ class_name }}DO.lambdaQueryWrapper()
            .eq({{ class_name }}DO::getTenantId, Objects.requireNonNull(getCurrentUser()).getCurrentTenantId())
            .eq({{ class_name }}DO::getUserId, Objects.requireNonNull(getCurrentUser()).getUserId());
        // 动态添加查询条件
        {%- for field in fields -%}
        {%- if field.gen_field.queryable == 1 -%}
        {% set field_name=field.gen_field.field_name[0].upper() + field.gen_field.field_name[1:] %}
        {%- if field.gen_field.field_type == 'String' %}
        if (!StringUtils.isEmpty({{ lowercase_class_name }}Query.get{{ field_name }}())) {
           queryWrapper.like({{ class_name }}DO::get{{ field_name }}, {{ lowercase_class_name }}Query.get{{ field_name }}());
        }
        {%- else %}
        if ({{ lowercase_class_name }}Query.get{{ field_name }}() != null) {
          queryWrapper.eq({{ class_name }}DO::get{{ field_name }}, {{ lowercase_class_name }}Query.get{{ field_name }}());
        }
        {%- endif %}
        {%- endif -%}
        {% endfor %}
        // 根据分页条件查询
        Page<{{ class_name }}DO> {{ lowercase_class_name }}Page = {{ lowercase_class_name }}Mapper.selectPage(pageRequest, queryWrapper);
        List<{{ class_name }}DO> {{ lowercase_class_name }}List = {{ lowercase_class_name }}Page.getRecords();
        if (CollectionUtils.isEmpty({{ lowercase_class_name }}List)) {
            return MapUtil.newHashMap();
        }
        List<{{ class_name }}Page> {{ lowercase_class_name }}PageList = {{ lowercase_class_name }}List.stream().map({{ class_name }}Converter.INSTANCE::{{ lowercase_class_name }}DOTo{{ class_name }}Page).toList();
        // 组装返回结果
        return ResponseWrapper.wrapperList({{ lowercase_class_name }}PageList, {{ lowercase_class_name }}Page.getTotal());

    }

    /**
     * 查询{{ function_name }}详情
     *
     * @param id {{ function_name }}id
     * @return {{ function_name }}详情
     */
    @Override
    public {{ class_name }}Detail fetch{{ class_name }}Detail(Long id) {
        {{ class_name }}DO {{ lowercase_class_name }}DO = this.getById(id);
        return {{ class_name }}Converter.INSTANCE.{{ lowercase_class_name }}DOTo{{ class_name }}Detail({{ lowercase_class_name }}DO);
    }

    /**
     * 导出{{ function_name }}页
     *
     * @param response Http响应
     * @param ids      {{ function_name }}id列表
     */
    @Override
    public void export{{ class_name }}Page(HttpServletResponse response, List<Long> ids) throws IOException {
        List<{{ class_name }}DO> {{ lowercase_class_name }}List = this.listByIds(ids);
        if (CollectionUtils.isEmpty({{ lowercase_class_name }}List)) {
            return;
        }
        List<{{ class_name }}Create> {{ lowercase_class_name }}CreateList = {{ lowercase_class_name }}List.stream().map({{ class_name }}Converter.INSTANCE::{{ lowercase_class_name }}DOTo{{ class_name }}Create).toList();
        ExcelExportUtil.exportToExcel(response, {{ lowercase_class_name }}CreateList, {{ class_name }}Create.class, "new_word_export");
    }

    /**
     * 创建{{ class_name }}
     *
     * @param {{ lowercase_class_name }}Create 创建{{ class_name }}的数据
     * @return 返回{{ class_name }}记录
     */
    @Override
    public {{ class_name }}DO create{{ class_name }}({{ class_name }}Create {{ lowercase_class_name }}Create) {
        {{ class_name }}DO {{ lowercase_class_name }}DO = {{ class_name }}Converter.INSTANCE.{{ lowercase_class_name }}CreateTo{{ class_name }}DO({{ lowercase_class_name }}Create);
        {{ class_name }}DO.fillInTenantIdUserId({{ lowercase_class_name }}DO);
        this.save({{ lowercase_class_name }}DO);
        return {{ lowercase_class_name }}DO;
    }

    /**
     * 批量创建{{ class_name }}
     * @param {{ lowercase_class_name }}CreateList 创建{{ class_name }}数据列表
     * @return 返回创建{{ class_name }}的数据列表
     */
    @Transactional(rollbackFor = Throwable.class)
    @Override
    public List<{{ class_name }}DO> batchCreate{{ class_name }}(List<{{ class_name }}Create> {{ lowercase_class_name }}CreateList) {
        List<{{ class_name }}DO> {{ lowercase_class_name }}DOList = {{ lowercase_class_name }}CreateList.stream().map({{ class_name }}Converter.INSTANCE::{{ lowercase_class_name }}CreateTo{{ class_name }}DO).map({{ class_name }}DO::fillInTenantIdUserId).toList();
        this.saveBatch({{ lowercase_class_name }}DOList);
        return {{ lowercase_class_name }}DOList;
    }


    /**
     * 批量更新{{ class_name }}信息
     *
     * @param {{ lowercase_class_name }}DO 批量更新{{ class_name }}的数据
     * @param ids       要更新{{ class_name }}的ID数组
     */
    @Transactional(rollbackFor = Throwable.class)
    @Override
    public void batchModify{{ class_name }}({{ class_name }}DO {{ lowercase_class_name }}DO, List<Long> ids) {
        List<{{ class_name }}DO> {{ lowercase_class_name }}List = new ArrayList<>();
        for (Long id : ids) {
            {{ lowercase_class_name }}DO.setId(id);
            {{ lowercase_class_name }}List.add({{ lowercase_class_name }}DO);
        }
        this.updateBatchById({{ lowercase_class_name }}List);
    }

    /**
     * 导入{{ class_name }}数据并进行校验
     *
     * @param file 上传的文件
     * @return 校验结果列表
     */
    @Override
    public List<{{ class_name }}Create> import{{ class_name }}s(MultipartFile file) throws IOException {
        List<{{ class_name }}Create> results = new ArrayList<>();
        try (InputStream inputStream = file.getInputStream()) {
            EasyExcel.read(inputStream, {{ class_name }}Create.class, new AnalysisEventListener<{{ class_name }}Create>() {
                @Override
                public void invoke({{ class_name }}Create {{ lowercase_class_name }}Create, AnalysisContext context) {
                    results.add({{ lowercase_class_name }}Create);
                }
                @Override
                public void doAfterAllAnalysed(AnalysisContext context) {
                    results.parallelStream().forEach({{ lowercase_class_name }}Create -> {
                        String errorMsg = validateService.validate({{ lowercase_class_name }}Create);
                        {{ lowercase_class_name }}Create.setErrorMsg(errorMsg);
                    });
                }
            }).sheet().doRead();
        } catch (IOException e) {
           log.error(e.getMessage());
        }
        return results;
    }

}
